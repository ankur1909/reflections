What happens when you initialize a repository? Why do you need to do it?

	when we initialize a repository a .git directory is created where the history of the commits is stored.
	We need to do it to let git know that we want to create a new repo.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is an area where we can place our files before comitting to the repository. 
	That way we can commit a single file or multiple files but we do not need to commit the complete repository at a time.
	Its helpful as it helps us commit only the files we have made changes to.

How can you use the staging area to make sure you have one commit per logical
change?

	The staging area holds the changes being made. However we can use git diff in
	different ways to see the differences between different directories.
	We can simply put thne changes w want to make in the staging area rest all the
	changes should be in the working directory only. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches help us in experimenting without bothering the master. We'll learn later on that 
	we'll be able to commit these branches or merge them to the master.

How do the diagrams help you visualize the branch structure?

		They help a lot. I just want to know if there are any physical diagrams in git or these are 
		just for our understanding.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	It helps us merge two branches while intelligently merging there features
	In the diagram we see an easy way of doing it.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	It shows git conflicts in case of ambiguous code. we can resolve it and the commit
	I still have to see this work myself